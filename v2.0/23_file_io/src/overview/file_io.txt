[ 파일 입출력 ] => java.io 패키지

- 파일 입출력을 하는 이유?
	1) 외부 파일을 읽어올 때 (텍스트 파일, 이미지 파일, 엑셀 파일 ...)
	2) 자바 프로그램 상에 있는 데이터를 영구히 저장하기 위함
	
	ex) Customer 분류 프로젝트할 때 
	고객 데이터를 매번 입력해야하는 이유?
	=> 데이터 영구적이지 않았기 때문
	=> 기존 입력 데이터는 프로그램을 다시 실행하면 사라짐 ...
	=> 만약 이 데이터를 어떤 파일에 저장해놓으면 매번 입력할 필요 X

- 입력 스트림 (InputStream)
	: 자바 프로그램 기준으로 데이터가 들어옴
	ex) 텍스트 파일의 회원 정보 데이터를 자바 프로그램으로 가지고 옴 

- 출력 스트림 (OutputStream)
	: 자바 프로그램 기준으로 데이터를 보냄
	ex) 회원 정보 중에서 30세 이상 회원 추출해서 텍스트 파일 저장

	* 하나의 스트림으로 입출력을 모두 할 수 없음
	* 입출력 스트림이 따로 필요함
	* 스트림도 단방향 (하나의 방향)	
	
- 스트림 클래스
	1) 바이트 기반: 문자/그림/동영상 모든 종류의 데이터 입출력 가능
		ex) InputStream, OutputStream
		
		Input(/Output)Stream > FileInput(/Output)Stream
						     > DataInput(/Output)Stream
					         > BufferedInput(/Output)Stream
	
	2) 문자 기반: 문자 입출력 가능
		ex) Reader, Writer
		
		Reader(/Writer) > FileReader(/Writer)
						> BufferedReader(/Writer)
						> InputStreamReader(/Writer)
						
						
- 보조 스트림 클래스
	: 다른 스트림 (InputStream/OutputStream, Reader/Writer)과 
	  연결해서 사용하는 스트림
	: 자체적으로 입출력 불가 
	ex) (파일 -> InputStream/Reader -> 보조스트림 -> 자바 프로그램)
	ex) (파일 <- OutputStream/Writer <- 보조스트림 <- 자바 프로그램)
	
	1) Buffer 스트림 (입출력 성능 향상)
		=> 바이트 기반: BufferedInput(/Output)Stream
		=> 문자 기반: BufferedReader(Writer)
	
	2) 기본 데이터 타입 입출력
		=> DataInput(/Output)Stream
		
	3) 객체 입출력
		=> 객체는 문자가 아니기 때문에 바이트 기반 스트림으로 출력해야 함
		=> ex) Student (name, gender, grade) implements Serializable
		=> ex) 101010101010101010 ....
		=> 객체의 필드값들을 일렬로 줄세워서 연속적인 바이트 단위로 변경
		
		=> 객체 직렬화 (serialization) / 역직렬화 (deserialization)
		=> ObjectInput(/Output)Stream





