[ 스트림 (stream) ]
ex) 흐름, 연속, 시내

- 자바 8 소개
- 컬렉션이나 배열의 원소를 흐름으로 간주하는 것
- 문제점: 원소들을 반복하는 코드가 복잡하다고 생각
  - 외부 반복자
	  - for(int i = 0; i < list.size(); i++){
	  		list.get(i);
	  	}
	  - while(iterator.hasNext()){
	  		iterator.next();
	  	}
	  	
- 스트림 => 내부 반복자 (컬렉션 "내부"에서 요소 반복)
	- 반복하는 코드를 작성하는 게 귀찮아서 ...
	- 알아서 자동으로 객체들을 돌아주는 문법을 없을까?
	- 자동으로 객체들을 돌아주면서 "무엇"을 할 것인지에 집중할 수 있음 (함수형 프로그래밍)
	
- 스트림 파이프라인
  : 여러 개의 스트림이 연결된 구조
  : list.stream().a().b().c() // function chaining
  
  a(), b(): 중간처리 메소드 (필터링, 정렬 ...) (여러 개 올 수 있음)
  c(): 최종처리 메소드 (출력, 합계, 평균 ...) (하나만 올 수 있음)
  
  ex) 스트림 원본 (컬렉션, 배열, 파일)
     -> 중간처리 스트림
     -> 중간처리 스트림
     -> ....
     -> 최종처리 스트림
     -> 결과 반환
     
  - 중간처리 메소드 (반환값이 스트림)
  	1) 필터링 (filter(), distinct() (중복 제거))
  	2) 매핑 (mapToInt(), mapToDouble()... map())
  	3) 정렬 (sorted() (객체가 알고 있는 정렬 방법으로 정렬 -> Comparable), 
  	        sorted(Comparator<T>))
  	4) 중간 결과물 반복 (peek() (vs forEach(): 최종처리 메소드))
  
  - 최종처리 메소드 (반환값이 기본타입이거나 컬렉션, OptionalXXX)
  	1) 집계 (하나의 값으로 산출) (count(), max(), min(), average(), sum(), findFirst())
  	2) 매칭 (allMatch(), anyMatch(), noneMatch())
  	3) 커스텀 집계 (reduce())
  	4) 수집 (collect())
  	5) 최종 결과물 반복 (forEach())
  	
  	cf) OptionalXXX
  		: 자바 8 추가
  		: 값을 저장하는 값 기반 클래스
  		: 값을 얻기 위해서는 get(), getAsDouble(), getAsInt(), getAsLong()....
  		: 값이 없을 경우 디폴트 값 설정할 수 있음
  