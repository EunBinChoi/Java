[ 컬렉션 프레임워크 (collection framework) ]


배열 한계 ?
Customer[] customers = new Customer[5];

1) 배열 사이즈 고정
ex) 배열 사이즈를 늘리고 싶을 경우 (5 -> 10)
Customer[] copy = Arrays.copyOf(customers); 
// 기존 데이터 복사 (새롭게 객체 배열을 new (할당)하면 기존 원소 null으로 변경)
customers = new Customer[10];
// 객체 배열을 새롭게 new (할당)
customers = Arrays.copyOf(copy);

새로 입력받은 고객수 = 5;
customers = Arrays.copyOf(customers, customers.length + 새로 입력받은 고객수);

=> Collection add()


2) 객체 배열의 중간 원소 (객체)의 삽입, 삭제하기 힘듦
customers = {c1, c2, c3, c4, c5};

if) c3 삭제
int index = c3의 인덱스를 검색;

customers[index] = null;
customers = {c1, c2, null, c4, c5};

for(int i = index + 1; i < customers.length; i++){
	customers[i-1] = customers[i];
}

customers = {c1, c2, c3, c4, c5};
if) c6 (c1, c2 사이에 추가)
customers = {c1, c6, c2, c3, c4, c5};

///////////////////////////////////////////

- 컬렉션 (collection): 객체를 저장하는 방법
: java.util 패키지
: 주요 인터페이스: List, Set, Map

1) List: 순서 유지 (숫자 인덱스로 접근)
		 원소 중복 가능 
   ex) ArrayList, Vector, LinkedList

2) Set: 집합 
        순서 유지 X
        원소 중복 불가
        
        {10, 20, 30} == {10, 10, 20, 30}
        {1, 6} == {6, 1}
	ex) HashSet, LinkedHashSet (삽입된 순서 유지), TreeSet (크기 순서 유지)


3) Map: key-value 쌍으로 저장 (mapping)
		키는 중복 불가 (원소를 접근하기 위한 인덱스 같은 존재)
		원소 중복 가능
		순서 유지 X
		
		key: value를 대표할 수 있는 방법 만듦 (검색 성능 좌우)
	ex) HashMap (not synchronized), Hashtable (synchronized), 
	LinkedHashMap (삽입된 순서 유지), TreeMap (크기 순서 유지 (키 기준으로 오름차순))
 
 key      value
"최사장" - "최사장"
"최대" - "최대리"
"최사원" - "최사원"
"김" - "김사장"
"박" - "박사장"


0 - "최사장"
1 - "최대리"
2 - "최사원"
3 - "김사장"
4 - "박사장"

4) Stack, Queue
- Stack: 마치 책이 쌓이는 것처럼 나중에 넣은 객체가 먼저 빠져나가는 자료구조
  입력: 1 -> 2 -> 3 -> 4
  출력: 4 -> 3 -> 2 -> 1
  
  => Last In, First Out (LIFO), 후입선출
  ex) Stack<E> stack = new Stack<E>();
  
  cf) Stack 메모리
  main
  int a = 3;
  int b = 5;
  int c = 7;
  
  	for(int i = 0; .....){  		
  	}
  	
  할당 순서: a -> b -> c -> i
  해제 순서: i -> c -> b -> a

- Queue: 마치 사람이 줄서있는 것처럼 먼저 넣은 객체가 먼저 빠져나가는 자료구조
  입력: 1 -> 2 -> 3 -> 4
  출력: 1 -> 2 -> 3 -> 4
  
  => First In, First Out (FIFO), 선입선출
  ex) Queue<E> queue = new LinkedList<E>();





