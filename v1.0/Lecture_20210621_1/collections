

객체
Customer customer1 = new Customer();
Customer customer2 = new Customer();
Customer customer3 = new Customer();
Customer customer4 = new Customer();
Customer customer5 = new Customer();
Customer customer6 = new Customer();
Customer customer7 = new Customer();
Customer customer8 = new Customer();
Customer customer9 = new Customer();
Customer customer10 = new Customer();


Customer customer[] = new Customer[200];
for(int i = 0; i < 200; i ++){
	customer[i] = new Customer();
}

customer[0] ~ customer[199]

문제점?
1) 코드 길어김
2) 객체 관리 (인덱스 검색) 힘들어짐
 (for + 인덱스) 


배열 한계?
1) 고정 크기

Customer customer[] = new Customer[10];
for(int i = 0; i < 10; i ++){
	customer[i] = new Customer();
}
인덱스 0 ~ 9 각각 원소들을 넣음


Customer customer[] = new Customer[20];
인덱스 0 ~ 9 각각 원소들을 넣음 => 날라감

for(int i = 0; i < 20; i ++){
	customer[i] = new Customer();
}

2) customer[7] = null; (회원 탈퇴)
0 ~ 6 || 7 (null) || 8 ~ 9
=> 공간 낭비
=> 해결 방법 ? 8 -> 7, 9 -> 8


< 컬렉션 프레임워크 (Collection Framework) >

- 컬렉션 (Collection): 객체를 수집해서 저장하는 방법
- 배열 문제점 (customers[3] 삭제하고 싶다면 ...?)
	1) 해당 인덱스의 객체를 삭제하게 된다면 (null로 대체)
	   객체가 중간에 비어있음 (공간이 낭비)
	2) 크기 고정 (만약에 101번째 고객을 넣고 싶을 경우 
		ArrayIndexOutOfBoundsException)

	Customer[] customers = new Customer[100]; 
	// 객체 배열 공간 할당
	for(int i = 0; i < customers.length; i ++){
		customers[i] = new Customer(); 
		// 객체 공간 할당
	}
	
	컬렉션
	: java.util 패키지
	: 주요 인터페이스: List, Set, Map
	
	Collection > List > ArrayList, Vector, LinkedList
			   > Set  > HashSet, TreeSet, LinkedHashSet
			   > Map  > HashMap, Hashtable, TreeMap
	
	
	List: 순서를 유지해서 저장, 중복 저장 가능, 인덱스로 접근 (숫자)
	(10 10 20 30 40)	
	
	Set: 순서를 유지하지 않고 저장, 중복 저장 불가 (집합)
	(10 10 20 30 40) => (10 20 30 40) == (20 10 30 40)  
	
	Map: 키-값의 쌍으로 저장 (mapping), 키는 중복 저장 불가
		키: 값을 대표하는 문자나 숫자
	
	ex) 영어사전
	키 (key) 값 (value)
	a    -> apple
	a    -> ant
    	
	b    -> banana
	m    -> melon
	
	      키(인덱스) 중복	        원소값 중복        순서
	===================================================
	List 인덱스 중복 불가 (0 ~ ..)     O             O
	Set  반복자                      X             X
	Map   키   중복 불가              O             X
	
	
	키가 중복 저장이 가능하다면 ? 검색이 불분명함
	voca['a'] = apple ? ant ?
	 
	
0   1     2   3   4
10  30    40  50  
- List 컬렉션 (ArrayList, Vector, LinkedList) 
  (제너릭 타입 List<E>) // E: Element (원소)
  : 객체를 일렬로 늘어놓은 구조
  : 인덱스를 통해 관리 (객체 검색, 삭제 기능 제공)
  : 객체 자체를 저장하는 것이 아니라 객체의 주소를 참조
  : 객체를 추가하면 리스트의 크기가 늘어남
  
  ArrayList
  * 객체 검색: 인덱스를 통해 할 수 있음
  * 객체 추가: 리스트의 크기가 자동으로 늘어남, 
  			 중간에 객체가 추가되는 경우,
  			 기존 값들이 한칸씩 뒤로 밀려남
  			 ex) index:  0  1  2  3  4
  			     value: 10 20 30 40 50
  			     
  			     2번에 25를 삽입
  			 ex) index:  0  1  2  3  4  5
  			     value: 10 20 25 30 40 50
  			     
  * 객체 삭제: 중간에 객체가 삭제되는 경우,
  			 기존 값들이 한칸씩 앞로 당겨짐
  			 ex) index:  0  1  2  3  4
  			     value: 10 20 30 40 50
  			     
  			     2번에 30을 삭제
  			 ex) index:  0  1  2  3  4  5
  			     value: 10 20 40 50 null
  
  - 객체 추가
  boolean add(E e): 주어진 객체를 맨 끝에 추가
  void add(int index, E e): 주어진 인덱스에 객체 추가
  E set(int index, E e)
  : 주어진 인덱스에 저장된 객체를 주어진 객체로 바꿈 (수정)
  
  - 객체 검색
  boolean contains(Object o): 주어진 객체가 저장되어있는 확인
  E get(int index): 주어진 인덱스에 저장된 객체 반환
  boolean isEmpty(): List가 비어있는지 조사
  int size(): 저장된 객체 수 리턴
  
  - 객체 삭제
  void clear(): 모든 객체 삭제
  E remove(int index): 주어진 인덱스에 저장된 객체 삭제
  boolean remove(Object o): 주어진 객체 삭제
  
    0    1     2    3
  홍길동 홍길동 홍길순 이클립
  remove("홍길동"): 0번이 삭제됨
  
   0    1     2    3
  홍길동 홍길순 이클립
  
  1) ArrayList
  	: List 인터페이스를 구현 클래스
  	: 객체를 인덱스로 관리
  	
  	일반 배열 vs ArrayList
  	>> 공통점: 인덱스 객체 관리 (순서 존재)
  	>> 차이점: 배열 - 크기 고정 (사용 중에 크기 변경 불가)
  				 - 중간 인덱스의 원소의 추가나 삭제가 되는 경우에
  				   듬성듬성 빠져있는 인덱스가 존재할 수 있음
  				 - 원소값이 고정적인 상태 (더 이상 원소변경이 없을 때)
  				   에 사용
  				 
  	>>      ArrayList - 크기 변경 가능
  	       (저장 용량보다 많은 객체가 들어오면 사이즈가 자동으로 늘어남)
  	       
  	       
  	ex) ArrayList<String> list1 = new ArrayList<String>(30);
  		String[] list2 = new String[30]; // 배열
  		
  	※ 중간 인덱스의 객체가 추가되거나 삭제된다면
  	객체 추가: 중간 인덱스 ~ 마지막 인덱스까지 모두 1씩 늘어남
  	객체 삭제: 중간 인덱스 ~ 마지막 인덱스까지 모두 1씩 앞으로 당겨짐
    (* 빈번한 중간 인덱스 객체 삽입과 삭제가 일어나면 좋지 않음)
    (* 원소 검색은 인덱스를 통해 할 수 있기 때문에 빠름)
    
    ArrayList 
    => 고정된 객체 (객체가 수정, 추가되거나 삭제되지 않음)로 구성할 경우
    Arrays.asList()
    
    
  2) Vector
  	: Vector와 ArrayList 동일한 내부 구조
  	
  	※ ArrayList vs Vector
  	Vector는 동기화된 (synchronized) 메소드로 구성
  	
  	동기화된 (synchronized) 메소드 ?????
  	멀티 스레드에서 동시에 이 메소드들을 실행할 수 없음
  	하나의 스레드가 실행 완료해야만 다른 스레드 실행 가능
  	>> "스레드가 안전 (Thread Safe) 하다"
  	
  	ex) 게임 id (item) 를 두 명이 쓰는 경우 ..
  	
  	3) LinkedList
  	: 하나의 노드에 데이터 + 다음 주소
  	: 메모리에 원소들이 연속되지 않을 수도 있음
  	
  	ArraysList vs LinkedList
  	- 원소의 중간 인덱스 원소의 삽입이나 삭제할 경우: LinkedList
  	- 원소의 검색할 경우: ArrayList
  	
  	cf) Doubly Linked List: 
  	하나의 노드에
  	이전 주소 + 데이터 + 다음 주소
  	
  	이전 주소를 담으면 좋은 점? 검색 성능 향상
  	
  	
  
- Set 컬렉션 (HashSet, LinkedHashSet, TreeSet) 
(제너릭 타입 Set<E>) E: element (원소)
	- List 컬렉션: 저장 순서 유지 O (인덱스 0 ~ ...)
	- Set 컬렉션: 저장 순서 유지 X (집합)
				객체를 중복해서 저장 X
				
	why Set 인덱스가 없느냐 ??
	>> 순서가 유지 되지 않기 떄문에 인덱스가 X
	>> 반복자 (Iterator)
				
		ex) {2, 3, 4, 5} == {3, 4, 5, 2}
		ex) {2, 2, 4, 5} == {2, 4, 5}		


	- 객체 추가
	boolean add(E e): 객체 저장
	
	// boolean add(int index, E e)
	: Set 순서가 유지되지 않기 때문에 인덱스 의미가 없음
	
	- 객체 검색
	boolean contains(Object o)
	: 주어진 객체 저장 여부
	boolean isEmpty()
	: 컬렉션이 비어있는지 조사
	Iterator<E> iterator()
	: 저장된 객체를 한번씩 가져오는 반복자 리턴 
	int size()
	: 저장된 객체 수 리턴
	
	- 객체 삭제
	void clear(): 모든 객체 삭제
	boolean remove(Object o): 주어진 객체 삭제
	
	// boolean remove(int index)
	: Set 순서가 유지되지 않기 때문에 인덱스 의미가 없음
	
	
	* 인덱스 대신 객체를 
	한 번씩 반복해서 가져오는 반복자 (Iterator) 제공
	
	* Iterator 인터페이스를 구현한 객체를 통해 반복자 제공
	(set.iterator())
	
	1) HashSet
		: "Hashing": hashCode() 비교
		: 만약에 동일한 해쉬코드가 있으면 그보다 작은 크기의 table로 대응
		{11, 12, 13, 14, 15}
		
		   값:                        11 12 13 14 15

		H(x) = x % 10 (해쉬함수) 
		* 해쉬함수를 통해 원소를 변경했을 때 중복이 생기면 X 
		  why ?  데이터가 날라갈 수 있음     
		   (해쉬함수 적용)
		  x 값:   11 12 13 14 15 (두 자리 수)
		  y 값:    1  2  3  4  5 (한 자리 수)    
		   
		   H-1(y) : y + (y / 10)
		   
		   (복구)
		   값:    1  2  3  4  5 (한 자리 수)    
		   값:   11 12             

		좋은 점? 저장공간을 아낄 수 있음
		
		a. 객체의 hashCode()
		두 객체가 hashCode()가 동일함: 11.hashCode() == 1.hashCode()
		
		b. 두 hashCode()가 동일하다면 다시 equals() 메소드로 비교
		true: 두 객체는 동일 => 중복저장하지 않음
		false: 두 객체는 다름
		
		
		// 20 15 30 5 18 25
		
	2) TreeSet (크기 순서)
		: 원소의 삽입시 데이터가 정렬된 상태로 들어감
		: 원소 추가, 삭제 - 느림
		: 원소 검색, 정렬 - 빠름
		: 트리 형태로 데이터를 저장 (오름차순 정렬)
		
	3) LinkedHashSet (삽입된 순서)
		: HashSet 상속받은 LinkedList
		: 원소가 삽입된 순서대로 데이터를 관리
		
		
- Map 컬렉션 (HashMap, Hashtable, LinkedHashMap, TreeMap)
(제너릭 타입 Map<K, V>)

	: 키 (key) - 값 (value) 맵핑으로 구성된 Entry 객체를 저장하는 구조
	: 키와 값은 모두 객체
	: 키는 중복 불가, 값은 중복 저장 가능
	
	   키  값
	1. a  apple
	2. a  ant 
	: 기존 값 (1번) 없어지고 새로운 값으로 대치 (2번 남음)
	: 데이터가 사라질 수도 있음 ... :(
	
	- 객체 추가
	V put(K key, V value): 주어진 키로 값을 저장
	반환값 V : 새로운 키일 경우 => NULL
	       : 동일한 키가 있을 경우 => 이전 값을 리턴
	       
	- 객체 검색
	boolean containsKey(Object key): 주어진 키가 있는지 여부
	boolean containsValue(Object value): 주어진 값이 있는지 여부
	Set<Map.Entry<K, V>> entrySet()
	: 키-값 쌍으로 구성된 모든 객체를 Set에 담아 리턴
	boolean isEmpty(): 컬렉션이 비어있는지 여부
	Set<K> keySet(): 모든 키를 Set 객체에 담아 리턴
	int size(): 저장된 키의 총 수를 리턴
	Collection<V> values: 저장된 모든 값을 Collection에 담아 리턴
	
	- 객체 삭제
	void clear(): 모든 키-값 삭제
	V remove(Object key): 주어진 키와 일치하는 Map.Entry 삭제하고 값 리턴 
	
	1) HashMap
		: Map 인터페이스를 구현한 대표적인 Map 컬렉션
		: hashing() 함수 사용 (값 적용)
		
		key 	value  -> hash 함수 적용
		a		apple  -> app
		b		banana -> ban
		
		* HashMap에서 키는 중복 확인하는 방법
		a. hashCode() 동일
		b. equals() true 반환
		
		: 주로 키 타입은 String 사용
		
	2) Hashtable
		: HashMap 동일한 내부 구조
		
		: HashMap vs Hashtable (ArraysList vs Vector)
		: Hashtable은 동기화된 (synchronized) 메소드 구성
		: 스레드에 안전 (thread safe)
	
	3) LinkedHashMap
		: HashMap 클래스를 상속받은 LinkedList
		: 데이터가 삽입된 순서대로 유지
	
	
- 검색 기능에 사용되는 컬렉션
	- TreeSet, TreeMap
	- why ? Tree 구조 저장 (오름차순 정렬)	
	- 이진 트리 (binary tree) 사용
	  : 자식 노드가 최대 2개 오는 트리
	  
	1) TreeSet<E> (제너릭 타입)
	: 왼쪽 자식 left (부모 노드보다 값이 작을 경우)
	: 오른쪽 자식 right (부모 노드보다 값이 클 경우)
	
	- 검색 메소드
	E first(): 제일 낮은 객체 리턴
	E last(): 제일 높은 객체 리턴
	E lower(E e): 주어진 객체보다 바로 아래 객체 리턴
	E higher(E e): 주어진 객체보다 바로 위 객체 리턴
	E floor(E e): 주어진 객체보다 동등한 객체가 있으면 리턴, 
				만약 없으면 주어진 객체의 바로 아래 객체 리턴
	E ceiling(E e): 주어진 객체보다 동등한 객체가 있으면 리턴, 
				만약 없으면 주어진 객체의 바로 위 객체 리턴
		
	E pollFirst(): 제일 낮은 객체를 반환하고 컬렉션에서 제거함
	E pollLast(): 제일 높은 객체를 반환하고 컬렉션에서 제거함
	
	- 정렬 메소드
	Iterator<E> descendingIterator()
	: 내림차순으로 정렬된 Iterator를 리턴
	NavigableSet<E> descendingSet()
	: 내림차순으로 정렬된 NavigableSet을 리턴
	: first(), last(), 
	: lower(), higher(), floor(), ceiling() 메소드 제공
	ex) 내림차순 정렬: descendingSet()
	ex) 오름차순 정렬: descendingSet().descendingSet()
	
	
	2) TreeMap
	: 이진 트리 기반으로 한 Map 컬렉션
	: TreeSet => 각 노드가 Value
	: TreeMap => 각 노드가 Key - Value 쌍이 저장된 Map.Entry
	: 오름차순 정렬 (키 기준)
	
	TreeMap<K, V> treeMap = new TreeMap<>();
	
	- 검색 관련 메소드
	Map.Entry<K, V> firstEntry()
	: 제일 낮은 Map.Entry를 리턴 (키 기준)
	Map.Entry<K, V> lastEntry()
	: 제일 높음 Map.Entry를 리턴 (키 기준)
	
	Map.Entry<K, V> lowerEntry(K key)
	: 주어진 키보다 바로 아래 Map.Entry를 리턴 (키 기준)
	Map.Entry<K, V> higherEntry(K key)
	: 주어진 키보다 바로 위 Map.Entry를 리턴 (키 기준)
	
	Map.Entry<K, V> floorEntry(K key)
	: 주어진 키와 동등한 키가 있으면 해당 Map.Entry를 리턴 (키 기준)
	: 없으면 주어진 키 바로 아래의 Map.Entry를 리턴
	Map.Entry<K, V> ceilingEntry(K key)
	: 주어진 키와 동등한 키가 있으면 해당 Map.Entry를 리턴 (키 기준)
	: 없으면 주어진 키보다 바로 위 Map.Entry를 리턴 (키 기준)
	
	Map.Entry<K, V> pollFirstEntry()
	: 제일 낮은 Map.Entry를 꺼내오고 컬렉션에서 제거 (키 기준)
	Map.Entry<K, V> pollLastEntry()
	: 제일 높은 Map.Entry를 꺼내오고 컬렉션에서 제거 (키 기준)
	
	
	
	- 정렬 관련 메소드
	NavigableSet<K> descendingKeySet()
	: 내림차순으로 정렬된 키 NavigableSet을 리턴
	: get(key): 키를 통해 value는 접근 가능
	
	NavigableMap<K, V> descendingMap()
	: 내림차순으로 정렬된 Map.Entry NavigableSet을 리턴
	
	
	* Tree를 사용하는 이유 ? 오름차순 정렬
	TreeSet: 저장된 값을 기준으로 오름차순 정렬
	TreeMap: 저장된 키를 기준으로 오름차순 정렬
	
	ex) TreeSet<Student>
		TreeMap<Student, String>
	=> Student 사용자 정의 클래스이기 때문에 정렬 기준 X
	=> ClassCastException
	
	=> String (사전 순서), Integer (크기 순서)
	=> 크기 비교를 하는 함수 정의 
	(Comparable 인터페이스 안에 compareTo 구현)
	
	
	1) Comparable
	- int compareTo(T o)
	: 기본 정렬 방식
	TreeSet<E> treeSet = new TreeSet<>();
	TreeMap<K, V> treeMap = new TreeMap<>();
	
	2) Comparator
	- int compare(T o1, T o2)
	TreeSet<E> treeSet = TreeSet<>(Comparator의 객체);
	TreeMap<K, V> treeMap = TreeMap<>(Comparator의 객체);
	
	
- LIFO, FIFO
	- LIFO : Last In, First Out (후입선출)
	: 나중에 넣은 객체가 먼저 빠져나가는 자료구조
	: 입력: 1 -> 2 -> 3 -> 4
	: 출력: 4 -> 3 -> 2 -> 1
	ex) Stack (스택) 클래스 extends Vector
		- E push(E item): 주어진 객체를 스택에 넣음
		- E peek(): 스택의 맨 위 객체를 가져옴 (스택에서 제거 X)
		- E pop(): 스택의 맨 위 객체를 가져옴 (스택에서 제거 O)
		
		ex) Stack<E> stack = new Stack<E>();
		
		
	cf) 스택 메모리
	for(int i = 0; i < 5; i ++){ // i 생성
		// i 살아있음
	} // i 소멸
	
	- FIFO: First In, First Out (선입선출)
	: 먼저 넣은 객체가 먼저 빠져나가는 자료구조
	: 입력: 1 -> 2 -> 3 -> 4
	: 출력: 1 -> 2 -> 3 -> 4
	ex) Queue (큐) 인터페이스
	(구현한 대표 클래스: LinkedList (List 컬렉션))
		- boolean offer(E e): 주어진 객체를 넣음
		- E peek(): 객체를 하나 가져옴 (큐에서 제거 X)
		- E poll(): 객체를 하나 가져옴 (큐에서 제거 O)
	
		ex) Queue<E> queue = new LinkedList<E>();


	