- 멀티 태스킹 (Multi-tasking)
  여러 개의 앱을 동시에 실행 방법
  
 - 프로그램 (Program)
  어떤 작업을 위해 실행할 수 있는 파일
  
 - 프로세스 (Process)
  "컴퓨터에서 연속적으로 실행하고 있는 프로그램"
  메모리에 올라와서 실행되고 있는 프로그램
  독립된 메모리를 할당 받음 (힙, 스택, 데이터 영역, 코드 영역)
  	- 스택: 지역 변수 (local variable)
  	- 힙: 동적 할당 (클래스 객체, 배열, String..)
  	- 데이터 영역: static 변수 (정적 변수)
  	- 코드 영역: 실행할 프로그램의 코드
  	
 - 스레드 (Thread)
   "프로세스 내에서 실행되는 흐름 단위"
   프로세스 당 최소 1개의 스레드를 가짐
   
 - 다중 스레딩 (multi-threading)
 	하나의 프로그램이 동시에 여러 가지 작업을 할 수 있는 것
 	ex) chrome에서 유투브도 보면서 웹 서핑
 	ex) 워드에서 문서를 편집하면서 동시에 인쇄함
 	
 
 - 메인 스레드 (main thread)
 	- 메인 스레드는 main() 함수를 순차적으로 실행
 	- 종료 시점: main() 함수의 마지막 코드 실행하거나
 	return을 만나면 종료
 	- 필요에 따라 작업 스레드들을 만들어서 
 	병렬로 코드 실행할 수 있음
 	
 - 작업 스레드 생성과 실행
 	- 1) 먼저 몇 개의 작업을 병렬로 실행할지 결정
 	- 2) 각 작업별로 스레드 생성
 	
 - 스레드 생성 방법
	 - 스레드는 Thread 클래스가 담당
	 
	 1) Thread 클래스를 상속
	    - run() 메소드 안에 작성
	    
	 2) Thread의 익명 객체로 작업 스레드 생성
	 	- Thread thread = new Thread(){
	 		public void run(){
	 			// 스레드가 실행할 코드;
	 		}	
	 	};
	 
	  	    
	 3) Runnable 인터페이스를 구현
	 	- run() 메소드 안에 작성
	 	- Runnable은 작업 스레드가 실행할 코드를 가지고 있는 객체
	 	- (실제 스레드 X)
	 	- Runnable 구현 객체를 생성한 후, 
	 	Thread 생성자의 매개값으로 Runnable 객체를 전달
	 	
	 4) Runnable 익명 객체를 매개값으로 사용
	 	- Thread thread = new Thread(new Runnable(){
	 		public void run(){
	 			// 실행할 코드;
	 		}
	 	});
	 
	 5) 람다식으로 매개값을 전달할 수도 있음
	 
 - 스레드의 이름
 	- 해당 스레드가 어떤 작업을 하는지 조사하는 목적으로 사용
 	- 메인 스레드: "main"
 	- 우리가 직접 생성한 스레드는 자동적으로 "Thread-n"
 	(n: 스레드의 번호)
 	- setName() 메소드로 스레드의 이름 변경 가능
 	- 스레드 이름 알고 싶을 경우에 getName()
 	- 객체가 없을 경우에는 정적 메소드 currentThread()를
 	이용하여 현재 코드를 실행하는 스레드의 이름을 얻을 수 있음
 	
 - 스레드 우선순위
 	- 멀티 스레드는 동시성 (Concurrency) 또는 병렬성 (Parallelism) 실행
 	- 동시성: 하나의 코어에서 멀티 스레드가 번걸아가며 실행하는 성질
 		core: Thread1 - Thread2 - Thread1 ....
 	- 병렬성: 여러 개의 코어에서 하나의 스레드가 동시에 실행하는 성질
 		core1: Thread1 ......
 		core2: Thread2 ......
 	- 싱글 코어 CPU를 이용한 멀티 스레드 작업
 	  병렬적으로 실행하는 것처럼 보이지만 번갈아가면서 실행하는 동시성 작업
 	  (속도가 빨라서 병렬성으로 보일 뿐! 눈속임 ..ㅎㅎ)
 	  
 	- 만약 스레드의 개수 > 코어의 수
 	- 스레드를 어떤 순서에 의해 실행할 것인지 결정 (스레드 스케줄링)
 	- 자바 스레드의 스케줄링
 	
 	1) 우선순위 (Priority) 방식
 	: 우선순위가 높은 스레드가 실행 상태를 더 많이 가지도록 스케줄링
 	: 스레드 객체에 우선순위 번호 부여 가능 (개발자가 코드 제어 가능)  
 	: 1 ~ 10까지 값 (디폴트 값: 5)
 	: Thread.MAX_PRIORITY  (10)
 	: Thread.NORM_PRIORITY (5)
 	: Thread.MIN_PRIORITY  (1)
 	: 우선순위 변경: setPriority()
 	
 	2) 순환 할당 (Round-Robin) 방식
 	: 시간 할당량 (time-slice)를 정해서
 	정해진 시간만큼 실행하고 다시 다른 스레드를 실행하는 방식
 	: 코드로 제어가 불가능 (by JVM)
 	
 
 - 동기화 (synchronized)
 	- 두 스레드가 동일한 객체 (공유 객체)를 사용할 때 문제점
 	: 스레드 A를 사용하던 객체가 스레드 B에 의해 변경될 수 있음
 	ex) 여러 사람이 게임 아이디를 공유할 때
 	
 	- 하나의 스레드가 현재 사용 중인 객체를 다른 스레드가 접근 불가능
 	하도록 해야 함
 	- 임계 영역 (critical section)으로 만들어야 함
 	- * 단 하나의 스레드만 실행할 수 있는 코드 영역
 	- 자바에서는 "synchronized"
 	 
 
 - 스레드의 상태
 	1. 스레드 객체 생성 (new)
 	2. 실행 대기 (Runnable)
 		: 스레드는 start() 하게되면 다음과 같은 상태로 진행
 		(아직 스케줄링이 되지 않아 실행을 기다리는 상태)
 	
 	3. 실행
 		: 실행 대기 상태에 있는 스레드 중에서 선택된 스레드가
 		run() 메소드 실행
 		: 실행 상태에 있는 스레는 run()를 모두 실행하기 전에
 		스레드 스케줄링에 따라 다시 실행 대기로 돌아갈 수도 있음
 		: 실행 ↔ 실행 대기 상태	(번갈아가면서 run() 메소드를 조금씩 실행)
 		
 		: 실행 상태에서 바로 일시 정지 상태로 가기도 함
 		: * 일시 정지 상태: 스레드가 실행할 수 없는 상태
 		(WAITING, TIMED_WAITING, BLOCKED)
 		: * 일시 정지 상태에 있는 스레드가 
 		: 다시 실행 상태로 가기 위해서는
 		: 일시 정지 상태 -> 실행 대기 상태 -> 실행
 		
 
 	4. 종료 (Terminated)
 		: run() 종료되면 더 이상 실행할 코드가 없기 때문에 종료
 
 
 	- 자바 5이후로부터, Thread 클래스에 getState() 메소드 추가
 	
 	상태     열거 상수 (enum)            설명
----------------------------------------------------------
 객체 생성		NEW		  스레드 객체 생성 (아직 start 호출 x)
 실행 대기	RUNNABLE	  실행 상태로 갈 수 있는 상태
 일시 정지	WAITING		  다른 스레드가 통지할 때까지 기다리는 상태
            TIMED_WAITING 주어진 시간동안 기다리는 상태
            BLOCKED       사용하고자 하는 객체의 락이
            			  풀릴 때까지 기다리는 상태
  종료 		TERMINATED    실행을 마친 상태
 --------------------------------------------------------
  
 	
 - Thread 클래스 메소드
 	- Thread()
 	- Thread(Runnable target)
 	- String getName(): 스레드의 이름 반환
 	- int getPriority(): 스레드의 우선 순위 반환
 	- void setPriority(int priority)
 	: 스레드의 우선 순위 지정
 	- void run(): 스레드가 시작될 떄 호출
 	- void start(): 스레드 호출
 	
 	
 	- void interrupt(): 스레드 중단
 	일시 정지 상태의 스레드에서 InterruptedException 발생시킴
 	catch 구문에서 실행 대기 상태로 가거나 종료 상태로 갈 수 있음
 	
 	- notify(), notifyAll()
 	: wait() 메소드에 의해 일시 정지 → 대기 상태
 	
 	- resume()
 	: suspend() 메소드에 의해 일시 정지 → 대기 상태
 	: Deprecated (사용 권장 X)
 	: notify(), notifyAll() 사용 권장됨
 
 	- boolean isInterrupted()
 	: 스레드 중단 가능 여부 검사
 	
 	- static void sleep(int milliseconds)
 	: 현재 스레드를 지정된 시간으로 재움
 	: 일시 정지 상태로 만듦
 	: 주어진 시간이 지나면 자동적으로 실행 대기 상태가 됨
 	
 	- static void yield()
 	: 현재 스레드를 다른 스레드에 양보하게 만듦
 	: 실행 대기 상태로 감
 	
 	- join()
 	: join() 메소드를 호출하면 호출한 스레드는 일시 정지 상태
 	: 실행 대기로 가려면 join된 스레드가 종료가 되거나 
 	: 주어진 시간이 지나야 함
 	
 	- wait(), wait(long millis)
 	: "동기화 블록 내에서" 스레드를 일시 정지 상태로 만듦
 	: 1) 매개값으로 주어진 시간이 지나면 자동적으로 실행 대기 상태
 	: 2) 시간이 주어지지 않으면 notify(), notifyAll()를 통해
 	실행 대기 상태
 	
 	- suspend(): 일시 정지 상태로 만듦 (Deprecated)
 	- stop(): 스레드를 즉시 종료시킴 (Deprecated)
 	
 	(wait, notify(), notifyAll() - Object 클래스의 메소드)
 	(* 나머지는 Thread 클래스의 메소드)
 	
 	
 	Thread 클래스: suspend() - resume(): "DeadLock (교착상태)"
 	Object 클래스: wait() - notify(): "동기화 블록 내"
 	
 	
 	