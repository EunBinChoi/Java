< 제네릭 (Generic) 타입 >
- Java 5 이후로 새로 추가
- 제네릭 컬렉션, 람다식, 스트림 많이 사용함 
(API Document에 많음)

장점 
1) 데이터형 변환 (type casting)을 제거
2) 컴파일시 타입 체크를 할 수 있음

클래스: public class 클래스명<T>{
	// 필드
	// 메소드
}
인터페이스: public interface 인터페이스명<T>{
	// 상수
	// 추상 메소드
	
	// 디폴트 메소드
	// 정적 메소드
}

- 멀티 타입 파라미터
: 두 개 이상의 타입 파라미터를 사용하고자 할 때
: 타입 파라미터, 타입 파라미터 ..

ex)
class<K, V...>
interface<K, V...>

- 제너릭 메소드 (<T, R> R method(T t))
: 매개 변수 타입과 리턴 타입으로 타입 파라미터를 갖는 메소드

ex) public <타입 파라미터 ,....> 
리턴타입 메소드명 (매개변수 ,...)

ex) public <T> Box<T> boxing(T t)

호출하는 코드
Box<Integer> box = boxing(100); 

- 제한된 타입 파라미터 (<T extends 최상위 타입>)
>> 최상위 타입 이하의 클래스만 구현이 가능

a + b
===============
3 + 5 = 8
3 + 5.0 = 8.0
3.0 + 5.0 = 8.0
===============
"하나" + "둘" ==> "하나둘" 


- 와일드카드 타입 
(<?>, <? extends ...>, <? super ...>

>> 와일드카드 (wildcard): ?


1) <?>: 제한없는 와일드카드
타입 파라미터의 구체적인 타입으로 
모든 클래스나 인터페이스가 올 수 있음

2) <? extends 상위타입>: 상위 클래스 제한
상위 클래스 이하의 타입만 올 수 있음

3) <? super 하위타입>: 하위 클래스 제한
하위 클래스 이상의 타입만 올 수 있음

