- 멀티 태스킹 (Multi-tasking)
  여러 개의 앱을 동시에 실행 방법
  
 - 프로그램 (Program)
  어떤 작업을 위해 실행할 수 있는 파일
  
 - 프로세스 (Process)
  "컴퓨터에서 연속적으로 실행하고 있는 프로그램"
  메모리에 올라와서 실행되고 있는 프로그램
  독립된 메모리를 할당 받음 (힙, 스택, 데이터 영역, 코드 영역)
  	- 스택: 지역 변수 (local variable)
  	- 힙: 동적 할당 (클래스 객체, 배열, String..)
  	- 데이터 영역: static 변수 (정적 변수)
  	- 코드 영역: 실행할 프로그램의 코드
  	
 - 스레드 (Thread)
   "프로세스 내에서 실행되는 흐름 단위"
   프로세스 당 최소 1개의 스레드를 가짐
   
 - 다중 스레딩 (multi-threading)
 	하나의 프로그램이 동시에 여러 가지 작업을 할 수 있는 것
 	ex) chrome에서 유투브도 보면서 웹 서핑
 	ex) 워드에서 문서를 편집하면서 동시에 인쇄함
 	
 
 - 메인 스레드 (main thread)
 	- 메인 스레드는 main() 함수를 순차적으로 실행
 	- 종료 시점: main() 함수의 마지막 코드 실행하거나
 	return을 만나면 종료
 	- 필요에 따라 작업 스레드들을 만들어서 
 	병렬로 코드 실행할 수 있음
 	
 - 작업 스레드 생성과 실행
 	- 1) 먼저 몇 개의 작업을 병렬로 실행할지 결정
 	- 2) 각 작업별로 스레드 생성
 	
 - 스레드 생성 방법
	 - 스레드는 Thread 클래스가 담당
	 
	 1) Thread 클래스를 상속
	    - run() 메소드 안에 작성
	    
	 2) Thread의 익명 객체로 작업 스레드 생성
	 	- Thread thread = new Thread(){
	 		public void run(){
	 			// 스레드가 실행할 코드;
	 		}	
	 	};
	 
	  	    
	 3) Runnable 인터페이스를 구현
	 	- run() 메소드 안에 작성
	 	- Runnable은 작업 스레드가 실행할 코드를 가지고 있는 객체
	 	- (실제 스레드 X)
	 	- Runnable 구현 객체를 생성한 후, 
	 	Thread 생성자의 매개값으로 Runnable 객체를 전달
	 	
	 4) Runnable 익명 객체를 매개값으로 사용
	 	- Thread thread = new Thread(new Runnable(){
	 		public void run(){
	 			// 실행할 코드;
	 		}
	 	}
	 });
	 
	 5) 람다식으로 매개값을 전달할 수도 있음
 	
 	
 - 스레드의 상태
 	: 스레드는 start() 하게되면 다음과 같은 상태로 진행
 	
 	1. 스레드 객체 생성 (new)
 	2. 실행 대기 (Runnable)
 	3. 실행
 	4. 종료 (Terminated)
 	
 - Thread 클래스 메소드
 	- Thread()
 	- Thread(Runnable target)
 	- String getName(): 스레드의 이름 반환
 	- int getPriority(): 스레드의 우선 순위 반환
 	- void setPriority(int priority)
 	: 스레드의 우선 순위 지정
 	- void interrupt(): 스레드 중단
 	- boolean isInterrupted()
 	: 스레드 중단 가능 여부 검사
 	- static void sleep(int milliseconds)
 	: 현재 스레드를 지정된 시간으로 재움
 	- void run(): 스레드가 시작될 떄 호출
 	- void start(): 스레드 호출
 	- static void yield()
 	: 현재 스레드를 다른 스레드에 양보하게 만듦
 	